import java.util.Scanner;

public class Solution{

    static  void pentgonCheck(double xpoint, double ypoint){
        //predefined A and B
        double[] A = {1,1};
        double[] B = {5,1};
        double[] C = new double[2];
        double[] D = new double[2];
        double[] E = new double[2];

        double pi = Math.PI;
        // finding E and C using trigonometric equations cos(theta) = base / hypotenuse

        // C vertex = { 6.23607, 2.23606}
        C[0] =  B[0]+Math.cos((72*pi)/180)*4;
        C[1] = B[1]+(Math.sin((72*pi)/180)*4);

        //E vertex = { -0.23607, 2.23606}
        E[0] = A[0] - Math.cos((72*pi)/180)*4;
        E[1] = A[1] + Math.sin((72*pi)/180)*4;


        // D vertex
        D[0] = 3;
        D[1] = C[1]-Math.sin((36*pi)/180);



        if(ypoint>=A[1] && ypoint <= E[1]){

            ///////////////////////////////////
            // LAYER1
            ///////////////////////////////////

            // x = ((y-y1)*((x2-x1)/(y2-y1)))+x2
            // Taking vertex A as (x1,y1) and vertex E as (x2,y2)
            double xLimiterLeft = ((ypoint - A[1])*((E[0]-A[0])/(E[1]-A[1])))+A[0];

            // Taking vertex B as (x1,y1) and vertex C as (x2,y2)
            double xLimiterRight = ((ypoint - B[1])*((C[0]-B[0])/(C[1]-B[1])))+B[0];

            //Checking whether xpoint is inside/outside/edge of xLimiter range
            if(xpoint>xLimiterLeft && xpoint<xLimiterRight){
                System.out.println("INSIDE");

            } else if (xpoint == xLimiterLeft || xpoint == xLimiterRight) {
                System.out.println("ON THE EDGE");
            }else{
                System.out.println("OUTSIDE");
            }


        }else if(ypoint >E[1] &&ypoint <= D[1]){
            ///////////////////////////////////
            // LAYER2
            ///////////////////////////////////

            // x = ((y-y1)*((x2-x1)/(y2-y1)))+x2
            // Taking vertex E as (x1,y1) and vertex D as (x2,y2)
            double xLimiterLeft = ((ypoint - E[1])*((D[0]-E[0])/(D[1]-E[1])))+E[0];

            // Taking vertex C as (x1,y1) and vertex D as (x2,y2)
            double xLimiterRight = ((ypoint - C[1])*((D[0]-C[0])/(D[1]-C[1])))+D[0];


            //Checking whether xpoint is inside/outside/edge of xLimiter range
            if(xpoint>xLimiterLeft && xpoint<xLimiterRight){
                System.out.println("INSIDE");

            } else if (xpoint == xLimiterLeft || xpoint == xLimiterRight) {
                System.out.println("ON THE EDGE");
            }else{
                System.out.println("OUTSIDE");
            }

        }else{
            System.out.println("OUTSIDE");
        }
    }
    public static void main(String[] args){
        //PENTAGON
        // assumptions:
        // 1. it is a regular pentagon
        // base is parallel to x-axis
        boolean continueOrNot = true;
        int continuationNum = 1;
        System.out.println("____PENTAGON____");
        while(continueOrNot){
            try{
                System.out.println("\n\n___NEW CHECK___");
                Scanner s = new Scanner(System.in);
                System.out.print("Type the x coordinate: ");
                double xpoint = s.nextDouble();
                System.out.print("Type the x coordinate: ");
                double ypoint = s.nextDouble();
                System.out.println("\n");
                pentgonCheck(xpoint,ypoint);

                System.out.print("\n\nDo you want to continue\n(0 - STOP, 1 - CONTINUE): ");

                continuationNum= s.nextInt();
                if(continuationNum == 0) continueOrNot = false;

            }catch (Exception e){
                System.out.println("\n\n!!!!!!!!!!!!!!!!!!! You typed wrong input!!!!!!!!!!!!!!!!!!!!!\n\n starting new cycle");
            }finally {
                if(continuationNum != 0 && continuationNum != 1) System.out.println("\nSince answer is other than 0 and 1,\nso starting a new cycle");
            }

        }/*
        System.out.println("____PENTAGON____");
        int continueOrNot = 1;
        while(continueOrNot == 1){
            System.out.println("\n\n___NEW CHECK___");
            Scanner s = new Scanner(System.in);
            System.out.print("Type the x coordinate: ");
            double xpoint = s.nextDouble();
            System.out.print("Type the x coordinate: ");
            double ypoint = s.nextDouble();
            System.out.println("\n");
            pentgonCheck(xpoint,ypoint);

            System.out.print("\nDo you want to continue\n(0 - STOP, 1 - CONTINUE): ");
            continueOrNot = s.nextInt();
        }
        */



    }
}
